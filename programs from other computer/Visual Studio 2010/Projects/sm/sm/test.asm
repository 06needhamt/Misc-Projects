; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\Thomas\Desktop\Source\test.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG4829	DB	'%d', 0aH, 00H
$SG4834	DB	'%d', 0aH, 00H
$SG4835	DB	'%f', 0aH, 00H
$SG4846	DB	'true', 0aH, 00H
	ORG $+2
$SG4847	DB	'false', 0aH, 00H
	ORG $+1
$SG4848	DB	'%s', 00H
	ORG $+1
$SG4859	DB	'%d', 0aH, 00H
$SG4861	DB	'%d', 0aH, 00H
$SG4862	DB	0aH, 00H
	ORG $+2
$SG4863	DB	'%s', 00H
CONST	ENDS
PUBLIC	?my_int_func@@YAXH@Z				; my_int_func
EXTRN	_printf:PROC
; Function compile flags: /Odtp
; File c:\users\thomas\desktop\source\test.cpp
_TEXT	SEGMENT
_x$ = 8							; size = 4
?my_int_func@@YAXH@Z PROC				; my_int_func

; 10   : {

	push	ebp
	mov	ebp, esp

; 11   :     printf( "%d\n", x );

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET $SG4829
	call	_printf
	add	esp, 8

; 12   : }

	pop	ebp
	ret	0
?my_int_func@@YAXH@Z ENDP				; my_int_func
_TEXT	ENDS
PUBLIC	?otherfunc@@YAXHN@Z				; otherfunc
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$ = 8							; size = 4
_d$ = 12						; size = 8
?otherfunc@@YAXHN@Z PROC				; otherfunc

; 15   : {

	push	ebp
	mov	ebp, esp

; 16   : 	printf( "%d\n", i );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET $SG4834
	call	_printf

; 17   : 	printf( "%f\n", d );

	fld	QWORD PTR _d$[ebp]
	fstp	QWORD PTR [esp]
	push	OFFSET $SG4835
	call	_printf
	add	esp, 12					; 0000000cH

; 18   : }

	pop	ebp
	ret	0
?otherfunc@@YAXHN@Z ENDP				; otherfunc
_TEXT	ENDS
PUBLIC	?boolfunc@@YAX_N@Z				; boolfunc
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = -8						; size = 4
_t$ = -4						; size = 4
_b$ = 8							; size = 1
?boolfunc@@YAX_N@Z PROC					; boolfunc

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 22   : 	int t = 0;

	mov	DWORD PTR _t$[ebp], 0

; 23   : 	if (!b)

	movzx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	jne	SHORT $LN6@boolfunc
$LN4@boolfunc:

; 24   : 	{
; 25   : 		while (t++ <= 20)

	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, 1
	mov	DWORD PTR _t$[ebp], edx
	cmp	ecx, 20					; 00000014H
	jg	SHORT $LN6@boolfunc

; 26   : 		{
; 27   : 			if (t > 10 && t <= 20)

	cmp	DWORD PTR _t$[ebp], 10			; 0000000aH
	jle	SHORT $LN2@boolfunc
	cmp	DWORD PTR _t$[ebp], 20			; 00000014H
	jg	SHORT $LN2@boolfunc

; 28   : 			{
; 29   : 				b = true;

	mov	BYTE PTR _b$[ebp], 1

; 30   : 			}
; 31   : 			else

	jmp	SHORT $LN1@boolfunc
$LN2@boolfunc:

; 32   : 			{
; 33   : 				b = false;

	mov	BYTE PTR _b$[ebp], 0
$LN1@boolfunc:

; 34   : 			}
; 35   : 			printf("%s",(b)?"true\n":"false\n");

	movzx	eax, BYTE PTR _b$[ebp]
	test	eax, eax
	je	SHORT $LN8@boolfunc
	mov	DWORD PTR tv73[ebp], OFFSET $SG4846
	jmp	SHORT $LN9@boolfunc
$LN8@boolfunc:
	mov	DWORD PTR tv73[ebp], OFFSET $SG4847
$LN9@boolfunc:
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	push	OFFSET $SG4848
	call	_printf
	add	esp, 8

; 36   : 		}

	jmp	SHORT $LN4@boolfunc
$LN6@boolfunc:

; 37   : 	}
; 38   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?boolfunc@@YAX_N@Z ENDP					; boolfunc
_TEXT	ENDS
PUBLIC	__real@4004000000000000
PUBLIC	_main
;	COMDAT __real@4004000000000000
CONST	SEGMENT
__real@4004000000000000 DQ 04004000000000000r	; 2.5
; Function compile flags: /Odtp
CONST	ENDS
_TEXT	SEGMENT
_foo3$ = -12						; size = 4
_foo2$ = -8						; size = 4
_foo$ = -4						; size = 4
_main	PROC

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 42   :     void (*foo)(int);
; 43   : 	void (*foo2) (int,double);
; 44   : 	void (*foo3) (bool);
; 45   : 	
; 46   : 	printf("%d\n",sizeof(double));

	push	8
	push	OFFSET $SG4859
	call	_printf
	add	esp, 8

; 47   : 	printf("%d\n",sizeof(float));

	push	4
	push	OFFSET $SG4861
	call	_printf
	add	esp, 8

; 48   : 	printf("%s","\n");

	push	OFFSET $SG4862
	push	OFFSET $SG4863
	call	_printf
	add	esp, 8

; 49   : 	
; 50   :     foo = &my_int_func;

	mov	DWORD PTR _foo$[ebp], OFFSET ?my_int_func@@YAXH@Z ; my_int_func

; 51   : 	foo2 = &otherfunc;

	mov	DWORD PTR _foo2$[ebp], OFFSET ?otherfunc@@YAXHN@Z ; otherfunc

; 52   : 	foo3 = &boolfunc;

	mov	DWORD PTR _foo3$[ebp], OFFSET ?boolfunc@@YAX_N@Z ; boolfunc

; 53   : 
; 54   :     (*foo)( 2 );

	push	2
	call	DWORD PTR _foo$[ebp]

; 55   : 	(*foo2)( 10,2.5 );

	add	esp, -4					; fffffffcH
	fld	QWORD PTR __real@4004000000000000
	fstp	QWORD PTR [esp]
	push	10					; 0000000aH
	call	DWORD PTR _foo2$[ebp]
	add	esp, 12					; 0000000cH

; 56   : 	(*foo3)(false);

	push	0
	call	DWORD PTR _foo3$[ebp]
	add	esp, 4

; 57   : 	
; 58   :     return 0;

	xor	eax, eax

; 59   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
END
